{"meta":{"title":"我的技术博客","subtitle":null,"description":null,"author":"chenhuaxiang","url":"https://chenhx9211.github.io","root":"/"},"pages":[],"posts":[{"title":"Web站点加速最佳实践","slug":"Best Practices for Speeding Up Your Web Site","date":"2018-04-08T03:29:07.000Z","updated":"2019-06-19T04:20:02.951Z","comments":true,"path":"2018/04/08/Best Practices for Speeding Up Your Web Site/","link":"","permalink":"https://chenhx9211.github.io/2018/04/08/Best Practices for Speeding Up Your Web Site/","excerpt":"&emsp;&emsp;Yahoo 的 Exceptional Performance team 总结了页面加载性能优化的黄金 14 条规则， 几年过去了，规则也发展到 7 类 35 条，根据原文翻译整理了一下，原文地址。规则分为七类：页面内容，服务器，cookie，css，javascript，图片和手机端。 感谢前端工具的发达，如 webpack，eslint，其中很多优化原则都可以让工具自动实施。","text":"&emsp;&emsp;Yahoo 的 Exceptional Performance team 总结了页面加载性能优化的黄金 14 条规则， 几年过去了，规则也发展到 7 类 35 条，根据原文翻译整理了一下，原文地址。规则分为七类：页面内容，服务器，cookie，css，javascript，图片和手机端。 感谢前端工具的发达，如 webpack，eslint，其中很多优化原则都可以让工具自动实施。 页面内容减少 HTTP 请求 合并所有脚本到一个脚本 合并所有 CSS 到一个 stylesheet 使用 CSS Sprites 方法减少图片请求：合并背景图到一个图片，然后使用 CSS background-image 和 background-position 属性显示需要的图片片段。 Image maps 同样是合并多个图片到一个，不过 Image maps 只适用在图片连续的场景, 例如导航条。image maps 的坐标定义繁琐又容易出错， 不推荐使用 image maps。 使用 inline images，用 data: URL scheme to 嵌入图片到 html 页面，或者合并 inline images 到 stylesheets。 注意，不是所有的浏览器都支持 Inline images。 减少 DNS 查询&emsp;&emsp;大部分浏览器都有独立于操作系统的 DNS 查询结果缓冲, Internet Explorer 默认缓存 30 分钟, Firefox 默认缓存 1 分钟。页面中使用多个主机名称可以提高并行下载数量，但是可能会增加 DNS 查询时间；反过来，减少使用的主机名称，减少 DNS 查询时间，但会降低并行下载数量。在这两者需要取得一个好的平衡，我的原则至少使用两个，但不超过四个主机名称。 避免重定向&emsp;&emsp;Redirects are accomplished using the 301 and 302 status codes. Here’s an example of the HTTP headers in a 301 response: HTTP/1.1 301 Moved Permanently Location: http://example.com/newuri Content-Type: text/htmlThe browser automatically takes the user to the URL specified in the Location field. All the information necessary for a redirect is in the headers. The body of the response is typically empty. Despite their names, neither a 301 nor a 302 response is cached in practice unless additional headers, such as Expires or Cache-Control, indicate it should be. The meta refresh tag and JavaScript are other ways to direct users to a different URL, but if you must do a redirect, the preferred technique is to use the standard 3xx HTTP status codes, primarily to ensure the back button works correctly. The main thing to remember is that redirects slow down the user experience. Inserting a redirect between the user and the HTML document delays everything in the page since nothing in the page can be rendered and no components can start being downloaded until the HTML document has arrived. One of the most wasteful redirects happens frequently and web developers are generally not aware of it. It occurs when a trailing slash (/) is missing from a URL that should otherwise have one. For example, going to http://astrology.yahoo.com/astrology results in a 301 response containing a redirect to http://astrology.yahoo.com/astrology/ (notice the added trailing slash). This is fixed in Apache by using Alias or mod_rewrite, or the DirectorySlash directive if you’re using Apache handlers. Connecting an old web site to a new one is another common use for redirects. Others include connecting different parts of a website and directing the user based on certain conditions (type of browser, type of user account, etc.). Using a redirect to connect two web sites is simple and requires little additional coding. Although using redirects in these situations reduces the complexity for developers, it degrades the user experience. Alternatives for this use of redirects include using Alias and mod_rewrite if the two code paths are hosted on the same server. If a domain name change is the cause of using redirects, an alternative is to create a CNAME (a DNS record that creates an alias pointing from one domain name to another) in combination with Alias or mod_rewrite. 缓冲 Ajax 响应结果&emsp;&emsp; 在 AJAX 响应中增加 Expires 或者 Cache-Control Header。 Post-load ComponentsYou can take a closer look at your page and ask yourself: “What’s absolutely required in order to render the page initially?”. The rest of the content and components can wait. JavaScript is an ideal candidate for splitting before and after the onload event. For example if you have JavaScript code and libraries that do drag and drop and animations, those can wait, because dragging elements on the page comes after the initial rendering. Other places to look for candidates for post-loading include hidden content (content that appears after a user action) and images below the fold. Tools to help you out in your effort: YUI Image Loader allows you to delay images below the fold and the YUI Get utility is an easy way to include JS and CSS on the fly. 提前加载组件Preload may look like the opposite of post-load, but it actually has a different goal. By preloading components you can take advantage of the time the browser is idle and request components (like images, styles and scripts) you’ll need in the future. This way when the user visits the next page, you could have most of the components already in the cache and your page will load much faster for the user. There are actually several types of preloading: Unconditional preload - as soon as onload fires, you go ahead and fetch some extra components. Check google.com for an example of how a sprite image is requested onload. This sprite image is not needed on the google.com homepage, but it is needed on the consecutive search result page.Conditional preload - based on a user action you make an educated guess where the user is headed next and preload accordingly. On search.yahoo.com you can see how some extra components are requested after you start typing in the input box.Anticipated preload - preload in advance before launching a redesign. It often happens after a redesign that you hear: “The new site is cool, but it’s slower than before”. Part of the problem could be that the users were visiting your old site with a full cache, but the new one is always an empty cache experience. You can mitigate this side effect by preloading some components before you even launched the redesign. Your old site can use the time the browser is idle and request images and scripts that will be used by the new sitetop 减少 DOM 元素数量A complex page means more bytes to download and it also means slower DOM access in JavaScript. It makes a difference if you loop through 500 or 5000 DOM elements on the page when you want to add an event handler for example. A high number of DOM elements can be a symptom that there’s something that should be improved with the markup of the page without necessarily removing content. Are you using nested tables for layout purposes? Are you throwing in more s only to fix layout issues? Maybe there’s a better and more semantically correct way to do your markup. A great help with layouts are the YUI CSS utilities: grids.css can help you with the overall layout, fonts.css and reset.css can help you strip away the browser’s defaults formatting. This is a chance to start fresh and think about your markup, for example use s only when it makes sense semantically, and not because it renders a new line. The number of DOM elements is easy to test, just type in Firebug’s console:document.getElementsByTagName(‘*‘).length And how many DOM elements are too many? Check other similar pages that have good markup. For example the Yahoo! Home Page is a pretty busy page and still under 700 elements (HTML tags). Split Components Across DomainsSplitting components allows you to maximize parallel downloads. Make sure you’re using not more than 2-4 domains because of the DNS lookup penalty. For example, you can host your HTML and dynamic content on www.example.org and split static components between static1.example.org and static2.example.org For more information check “Maximizing Parallel Downloads in the Carpool Lane” by Tenni Theurer and Patty Chi. 尽量减少使用 iframeiframe 帮助第三方内容嵌入，帮助脚本并行下载，但是使用它的代价很大，它会阻塞页面加载 不使用 404一个无用的响应(例如 404 Not Found) 完全没有用处，只会降低用户体验。有些站点使用诸如”Did you mean X?”的 404 响应, 对用户体验有帮助但是浪费了服务器资源(例如数据库等). 如果链接是一个外部的脚本，而返回的响应是 404，尤其糟糕：首先, 脚本下载会阻塞并行下载，其次如果 404 响应的 body 是 JavaScript 代码，浏览器会去解析脚本。 服务器使用 CDNThe user’s proximity to your web server has an impact on response times. Deploying your content across multiple, geographically dispersed servers will make your pages load faster from the user’s perspective. But where should you start? As a first step to implementing geographically dispersed content, don’t attempt to redesign your web application to work in a distributed architecture. Depending on the application, changing the architecture could include daunting tasks such as synchronizing session state and replicating database transactions across server locations. Attempts to reduce the distance between users and your content could be delayed by, or never pass, this application architecture step. Remember that 80-90% of the end-user response time is spent downloading all the components in the page: images, stylesheets, scripts, Flash, etc. This is the Performance Golden Rule. Rather than starting with the difficult task of redesigning your application architecture, it’s better to first disperse your static content. This not only achieves a bigger reduction in response times, but it’s easier thanks to content delivery networks. A content delivery network (CDN) is a collection of web servers distributed across multiple locations to deliver content more efficiently to users. The server selected for delivering content to a specific user is typically based on a measure of network proximity. For example, the server with the fewest network hops or the server with the quickest response time is chosen. Some large Internet companies own their own CDN, but it’s cost-effective to use a CDN service provider, such as Akamai Technologies, EdgeCast, or level3. For start-up companies and private web sites, the cost of a CDN service can be prohibitive, but as your target audience grows larger and becomes more global, a CDN is necessary to achieve fast response times. At Yahoo!, properties that moved static content off their application web servers to a CDN (both 3rd party as mentioned above as well as Yahoo’s own CDN) improved end-user response times by 20% or more. Switching to a CDN is a relatively easy code change that will dramatically improve the speed of your web site. Add an Expires or a Cache-Control HeaderThere are two aspects to this rule: For static components: implement “Never expire” policy by setting far future Expires headerFor dynamic components: use an appropriate Cache-Control header to help the browser with conditional requests Gzip ComponentsStarting with HTTP/1.1, web clients indicate support for compression with the Accept-Encoding header in the HTTP request. Accept-Encoding: gzip, deflateIf the web server sees this header in the request, it may compress the response using one of the methods listed by the client. The web server notifies the web client of this via the Content-Encoding header in the response. Content-Encoding: gzip配置 ETagsEntity tags (ETags) are a mechanism that web servers and browsers use to determine whether the component in the browser’s cache matches the one on the origin server. (An “entity” is another word a “component”: images, scripts, stylesheets, etc.) ETags were added to provide a mechanism for validating entities that is more flexible than the last-modified date. An ETag is a string that uniquely identifies a specific version of a component. The only format constraints are that the string be quoted. The origin server specifies the component’s ETag using the ETag response header. HTTP/1.1 200 OK Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT ETag: &quot;10c24bc-4ab-457e1c1f&quot; Content-Length: 12195Later, if the browser has to validate a component, it uses the If-None-Match header to pass the ETag back to the origin server. If the ETags match, a 304 status code is returned reducing the response by 12195 bytes for this example. GET /i/yahoo.gif HTTP/1.1 Host: us.yimg.com If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT If-None-Match: &quot;10c24bc-4ab-457e1c1f&quot; HTTP/1.1 304 Not ModifiedThe problem with ETags is that they typically are constructed using attributes that make them unique to a specific server hosting a site. ETags won’t match when a browser gets the original component from one server and later tries to validate that component on a different server, a situation that is all too common on Web sites that use a cluster of servers to handle requests. By default, both Apache and IIS embed data in the ETag that dramatically reduces the odds of the validity test succeeding on web sites with multiple servers. The ETag format for Apache 1.3 and 2.x is inode-size-timestamp. Although a given file may reside in the same directory across multiple servers, and have the same file size, permissions, timestamp, etc., its inode is different from one server to the next. IIS 5.0 and 6.0 have a similar issue with ETags. The format for ETags on IIS is Filetimestamp:ChangeNumber. A ChangeNumber is a counter used to track configuration changes to IIS. It’s unlikely that the ChangeNumber is the same across all IIS servers behind a web site. The end result is ETags generated by Apache and IIS for the exact same component won’t match from one server to another. If the ETags don’t match, the user doesn’t receive the small, fast 304 response that ETags were designed for; instead, they’ll get a normal 200 response along with all the data for the component. If you host your web site on just one server, this isn’t a problem. But if you have multiple servers hosting your web site, and you’re using Apache or IIS with the default ETag configuration, your users are getting slower pages, your servers have a higher load, you’re consuming greater bandwidth, and proxies aren’t caching your content efficiently. Even if your components have a far future Expires header, a conditional GET request is still made whenever the user hits Reload or Refresh. If you’re not taking advantage of the flexible validation model that ETags provide, it’s better to just remove the ETag altogether. The Last-Modified header validates based on the component’s timestamp. And removing the ETag reduces the size of the HTTP headers in both the response and subsequent requests. This Microsoft Support article describes how to remove ETags. In Apache, this is done by simply adding the following line to your Apache configuration file: FileETag noneFlush the Buffer EarlyWhen users request a page, it can take anywhere from 200 to 500ms for the backend server to stitch together the HTML page. During this time, the browser is idle as it waits for the data to arrive. In PHP you have the function flush(). It allows you to send your partially ready HTML response to the browser so that the browser can start fetching components while your backend is busy with the rest of the HTML page. The benefit is mainly seen on busy backends or light frontends. A good place to consider flushing is right after the HEAD because the HTML for the head is usually easier to produce and it allows you to include any CSS and JavaScript files for the browser to start fetching in parallel while the backend is still processing. Example: ... &lt;!-- css, js --&gt; &lt;/head&gt; &lt;?php flush(); ?&gt; &lt;body&gt; ... &lt;!-- content --&gt;Yahoo! search pioneered research and real user testing to prove the benefits of using this technique. Use GET for AJAX RequestsThe Yahoo! Mail team found that when using XMLHttpRequest, POST is implemented in the browsers as a two-step process: sending the headers first, then sending data. So it’s best to use GET, which only takes one TCP packet to send (unless you have a lot of cookies). The maximum URL length in IE is 2K, so if you send more than 2K data you might not be able to use GET. An interesting side affect is that POST without actually posting any data behaves like GET. Based on the HTTP specs, GET is meant for retrieving information, so it makes sense (semantically) to use GET when you’re only requesting data, as opposed to sending data to be stored server-side. 避免 Image 元素的 src 属性为空无论是 html 代码中的&lt;img src=&quot;&quot;&gt;或是通过 JavaScript 12var img = new Image();img.src = &quot;&quot;; 都导致同样结果: 浏览器多发出一个 http 请求： Internet Explorer 会请求页面目录 Safari 和 Chrome 会请求页面. Firefox 3 以及之前的版本如同 Safari 和 Chrome, 不过 3.5 不再发出请求. Opera 不会发出请求. Why is this behavior bad? Cripple your servers by sending a large amount of unexpected traffic, especially for pages that get millions of page views per day.Waste server computing cycles generating a page that will never be viewed.Possibly corrupt user data. If you are tracking state in the request, either by cookies or in another way, you have the possibility of destroying data. Even though the image request does not return an image, all of the headers are read and accepted by the browser, including all cookies. While the rest of the response is thrown away, the damage may already be done. HTML5 增加了对 to the description of the tag’s src attribute to instruct browsers not to make an additional request The src attribute must be present, and must contain a valid URL referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted. If the base URI of the element is the same as the document’s address, then the src attribute’s value must not be the empty string.Hopefully, browsers will not have this problem in the future. Unfortunately, there is no such clause for &lt;script src=&quot;&quot;&gt; and &lt;link href=&quot;&quot;&gt; Maybe there is still time to make that adjustment to ensure browsers don’t accidentally implement this behavior.This rule was inspired by Yahoo!’s JavaScript guru Nicolas C. Zakas. For more information check out his article “Empty image src can destroy your site”. Cookie减少 Cookie 大小HTTP cookies are used for a variety of reasons such as authentication and personalization. Information about cookies is exchanged in the HTTP headers between web servers and browsers. It’s important to keep the size of cookies as low as possible to minimize the impact on the user’s response time. For more information check “When the Cookie Crumbles” by Tenni Theurer and Patty Chi. The take-home of this research: Eliminate unnecessary cookiesKeep cookie sizes as low as possible to minimize the impact on the user response timeBe mindful of setting cookies at the appropriate domain level so other sub-domains are not affectedSet an Expires date appropriately. An earlier Expires date or none removes the cookie sooner, improving the user response time Use Cookie-free Domains for ComponentsWhen the browser makes a request for a static image and sends cookies together with the request, the server doesn’t have any use for those cookies. So they only create network traffic for no good reason. You should make sure static components are requested with cookie-free requests. Create a subdomain and host all your static components there. If your domain is www.example.org, you can host your static components on static.example.org. However, if you’ve already set cookies on the top-level domain example.org as opposed to www.example.org, then all the requests to static.example.org will include those cookies. In this case, you can buy a whole new domain, host your static components there, and keep this domain cookie-free. Yahoo! uses yimg.com, YouTube uses ytimg.com, Amazon uses images-amazon.com and so on. Another benefit of hosting static components on a cookie-free domain is that some proxies might refuse to cache the components that are requested with cookies. On a related note, if you wonder if you should use example.org or www.example.org for your home page, consider the cookie impact. Omitting www leaves you no choice but to write cookies to *.example.org, so for performance reasons it’s best to use the www subdomain and write the cookies to that subdomain. CSS把 Stylesheets 放在 html 代码的前面While researching performance at Yahoo!, we discovered that moving stylesheets to the document HEAD makes pages appear to be loading faster. This is because putting stylesheets in the HEAD allows the page to render progressively. Front-end engineers that care about performance want a page to load progressively; that is, we want the browser to display whatever content it has as soon as possible. This is especially important for pages with a lot of content and for users on slower Internet connections. The importance of giving users visual feedback, such as progress indicators, has been well researched and documented. In our case the HTML page is the progress indicator! When the browser loads the page progressively the header, the navigation bar, the logo at the top, etc. all serve as visual feedback for the user who is waiting for the page. This improves the overall user experience. The problem with putting stylesheets near the bottom of the document is that it prohibits progressive rendering in many browsers, including Internet Explorer. These browsers block rendering to avoid having to redraw elements of the page if their styles change. The user is stuck viewing a blank white page. The HTML specification clearly states that stylesheets are to be included in the HEAD of the page: “Unlike A, [LINK] may only appear in the HEAD section of a document, although it may appear any number of times.” Neither of the alternatives, the blank white screen or flash of unstyled content, are worth the risk. The optimal solution is to follow the HTML specification and load your stylesheets in the document HEAD. 避免 CSS 表达式CSS expressions are a powerful (and dangerous) way to set CSS properties dynamically. They were supported in Internet Explorer starting with version 5, but were deprecated starting with IE8. As an example, the background color could be set to alternate every hour using CSS expressions: 1background-color: expression( (new Date()).getHours()%2 ? &quot;#B8D4FF&quot; : &quot;#F08A00&quot; ); As shown here, the expression method accepts a JavaScript expression. The CSS property is set to the result of evaluating the JavaScript expression. The expression method is ignored by other browsers, so it is useful for setting properties in Internet Explorer needed to create a consistent experience across browsers. The problem with expressions is that they are evaluated more frequently than most people expect. Not only are they evaluated when the page is rendered and resized, but also when the page is scrolled and even when the user moves the mouse over the page. Adding a counter to the CSS expression allows us to keep track of when and how often a CSS expression is evaluated. Moving the mouse around the page can easily generate more than 10,000 evaluations. One way to reduce the number of times your CSS expression is evaluated is to use one-time expressions, where the first time the expression is evaluated it sets the style property to an explicit value, which replaces the CSS expression. If the style property must be set dynamically throughout the life of the page, using event handlers instead of CSS expressions is an alternative approach. If you must use CSS expressions, remember that they may be evaluated thousands of times and could affect the performance of your page. 避免使用 CSS FilterThe IE-proprietary AlphaImageLoader filter aims to fix a problem with semi-transparent true color PNGs in IE versions &lt; 7. The problem with this filter is that it blocks rendering and freezes the browser while the image is being downloaded. It also increases memory consumption and is applied per element, not per image, so the problem is multiplied. The best approach is to avoid AlphaImageLoader completely and use gracefully degrading PNG8 instead, which are fine in IE. If you absolutely need AlphaImageLoader, use the underscore hack _filter as to not penalize your IE7+ users. Choose over @importOne of the previous best practices states that CSS should be at the top in order to allow for progressive rendering. In IE @import behaves the same as using at the bottom of the page, so it’s best not to use it. Javascript把 Scripts 放在 html 文件底部The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won’t start any other downloads, even on different hostnames. In some situations it’s not easy to move scripts to the bottom. If, for example, the script uses document.write to insert part of the page’s content, it can’t be moved lower in the page. There might also be scoping issues. In many cases, there are ways to workaround these situations. An alternative suggestion that often comes up is to use deferred scripts. The DEFER attribute indicates that the script does not contain document.write, and is a clue to browsers that they can continue rendering. Unfortunately, Firefox doesn’t support the DEFER attribute. In Internet Explorer, the script may be deferred, but not as much as desired. If a script can be deferred, it can also be moved to the bottom of the page. That will make your web pages load faster. 删除重复代码It hurts performance to include the same JavaScript file twice in one page. This isn’t as unusual as you might think. A review of the ten top U.S. web sites shows that two of them contain a duplicated script. Two main factors increase the odds of a script being duplicated in a single web page: team size and number of scripts. When it does happen, duplicate scripts hurt performance by creating unnecessary HTTP requests and wasted JavaScript execution. Unnecessary HTTP requests happen in Internet Explorer, but not in Firefox. In Internet Explorer, if an external script is included twice and is not cacheable, it generates two HTTP requests during page loading. Even if the script is cacheable, extra HTTP requests occur when the user reloads the page. In addition to generating wasteful HTTP requests, time is wasted evaluating the script multiple times. This redundant JavaScript execution happens in both Firefox and Internet Explorer, regardless of whether the script is cacheable. One way to avoid accidentally including the same script twice is to implement a script management module in your templating system. The typical way to include a script is to use the SCRIPT tag in your HTML page. 1&lt;script type=&quot;text/javascript&quot; src=&quot;menu_1.0.17.js&quot;&gt;&lt;/script&gt; An alternative in PHP would be to create a function called insertScript. 1&lt;?php insertScript(&quot;menu.js&quot;) ?&gt; In addition to preventing the same script from being inserted multiple times, this function could handle other issues with scripts, such as dependency checking and adding version numbers to script filenames to support far future Expires headers. Minimize DOM AccessAccessing DOM elements with JavaScript is slow so in order to have a more responsive page, you should: Cache references to accessed elementsUpdate nodes “offline” and then add them to the treeAvoid fixing layout with JavaScriptFor more information check the YUI theatre’s “High Performance Ajax Applications” by Julien Lecomte. Develop Smart Event HandlersSometimes pages feel less responsive because of too many event handlers attached to different elements of the DOM tree which are then executed too often. That’s why using event delegation is a good approach. If you have 10 buttons inside a div, attach only one event handler to the div wrapper, instead of one handler for each button. Events bubble up so you’ll be able to catch the event and figure out which button it originated from. You also don’t need to wait for the onload event in order to start doing something with the DOM tree. Often all you need is the element you want to access to be available in the tree. You don’t have to wait for all images to be downloaded. DOMContentLoaded is the event you might consider using instead of onload, but until it’s available in all browsers, you can use the YUI Event utility, which has an onAvailable method. For more information check the YUI theatre’s “High Performance Ajax Applications” by Julien Lecomte. Make JavaScript and CSS Externaltag: javascript, css Many of these performance rules deal with how external components are managed. However, before these considerations arise you should ask a more basic question: Should JavaScript and CSS be contained in external files, or inlined in the page itself? Using external files in the real world generally produces faster pages because the JavaScript and CSS files are cached by the browser. JavaScript and CSS that are inlined in HTML documents get downloaded every time the HTML document is requested. This reduces the number of HTTP requests that are needed, but increases the size of the HTML document. On the other hand, if the JavaScript and CSS are in external files cached by the browser, the size of the HTML document is reduced without increasing the number of HTTP requests. The key factor, then, is the frequency with which external JavaScript and CSS components are cached relative to the number of HTML documents requested. This factor, although difficult to quantify, can be gauged using various metrics. If users on your site have multiple page views per session and many of your pages re-use the same scripts and stylesheets, there is a greater potential benefit from cached external files. Many web sites fall in the middle of these metrics. For these sites, the best solution generally is to deploy the JavaScript and CSS as external files. The only exception where inlining is preferable is with home pages, such as Yahoo!’s front page and My Yahoo!. Home pages that have few (perhaps only one) page view per session may find that inlining JavaScript and CSS results in faster end-user response times. For front pages that are typically the first of many page views, there are techniques that leverage the reduction of HTTP requests that inlining provides, as well as the caching benefits achieved through using external files. One such technique is to inline JavaScript and CSS in the front page, but dynamically download the external files after the page has finished loading. Subsequent pages would reference the external files that should already be in the browser’s cache. Minify JavaScript and CSStag: javascript, css Minification is the practice of removing unnecessary characters from code to reduce its size thereby improving load times. When code is minified all comments are removed, as well as unneeded white space characters (space, newline, and tab). In the case of JavaScript, this improves response time performance because the size of the downloaded file is reduced. Two popular tools for minifying JavaScript code are JSMin and YUI Compressor. The YUI compressor can also minify CSS. Obfuscation is an alternative optimization that can be applied to source code. It’s more complex than minification and thus more likely to generate bugs as a result of the obfuscation step itself. In a survey of ten top U.S. web sites, minification achieved a 21% size reduction versus 25% for obfuscation. Although obfuscation has a higher size reduction, minifying JavaScript is less risky. In addition to minifying external scripts and styles, inlined &lt;script&gt; and &lt;style&gt; blocks can and should also be minified. Even if you gzip your scripts and styles, minifying them will still reduce the size by 5% or more. As the use and size of JavaScript and CSS increases, so will the savings gained by minifying your code. 图片Optimize CSS SpritesArranging the images in the sprite horizontally as opposed to vertically usually results in a smaller file size.Combining similar colors in a sprite helps you keep the color count low, ideally under 256 colors so to fit in a PNG8.“Be mobile-friendly” and don’t leave big gaps between the images in a sprite. This doesn’t affect the file size as much but requires less memory for the user agent to decompress the image into a pixel map. 100x100 image is 10 thousand pixels, where 1000x1000 is 1 million pixels 不要在 HTML 中缩放图片不要使用Don’t use a bigger image than you need just because you can set the width and height in HTML. 例如 1&lt;img width=&quot;100&quot; height=&quot;100&quot; src=&quot;mycat.jpg&quot; alt=&quot;My Cat&quot; /&gt; 图片 mycat.jpg 就应该是 100x100px，而不是一个 500x500px. Make favicon.ico Small and CacheableThe favicon.ico is an image that stays in the root of your server. It’s a necessary evil because even if you don’t care about it the browser will still request it, so it’s better not to respond with a 404 Not Found. Also since it’s on the same server, cookies are sent every time it’s requested. This image also interferes with the download sequence, for example in IE when you request extra components in the onload, the favicon will be downloaded before these extra components. So to mitigate the drawbacks of having a favicon.ico make sure: It’s small, preferably under 1K.Set Expires header with what you feel comfortable (since you cannot rename it if you decide to change it). You can probably safely set the Expires header a few months in the future. You can check the last modified date of your current favicon.ico to make an informed decision.Imagemagick can help you create small favicons Optimize ImagesAfter a designer is done with creating the images for your web page, there are still some things you can try before you FTP those images to your web server. You can check the GIFs and see if they are using a palette size corresponding to the number of colors in the image. Using imagemagick it’s easy to check usingidentify -verbose image.gifWhen you see an image using 4 colors and a 256 color “slots” in the palette, there is room for improvement.Try converting GIFs to PNGs and see if there is a saving. More often than not, there is. Developers often hesitate to use PNGs due to the limited support in browsers, but this is now a thing of the past. The only real problem is alpha-transparency in true color PNGs, but then again, GIFs are not true color and don’t support variable transparency either. So anything a GIF can do, a palette PNG (PNG8) can do too (except for animations). This simple imagemagick command results in totally safe-to-use PNGs:convert image.gif image.png“All we are saying is: Give PiNG a Chance!”Run pngcrush (or any other PNG optimizer tool) on all your PNGs. Example:pngcrush image.png -rem alla -reduce -brute result.pngRun jpegtran on all your JPEGs. This tool does lossless JPEG operations such as rotation and can also be used to optimize and remove comments and other useless information (such as EXIF information) from your images.jpegtran -copy none -optimize -perfect src.jpg dest.jpg 手机端组件(译者注：指的是 html 页面，css，js，图片等等页面内容文件)的大小不要超过 25KiPhone 不会缓冲大于 25K 的内容。 值得注意的是 25k 是指解压后的文件大小，单独使用 gzip 不起作用，因此减少文件的大小很重要。 详情可参看 Wayne Shea 和 Tenni Theurer 写的“Performance Research, Part 5: iPhone Cacheability - Making it Stick”. Pack Components into a Multipart Document把内容组件打包到一个 multipart 文档，就像带附件的电子邮件, 有助于使用一次 HTTP 请求，获取多个内容组件。使用这个技巧前, 首先检查一下客户端的 user agent 是否支持(iPhone 不支持)。","categories":[{"name":"performance","slug":"performance","permalink":"https://chenhx9211.github.io/categories/performance/"}],"tags":[{"name":"性能","slug":"性能","permalink":"https://chenhx9211.github.io/tags/性能/"}]},{"title":"高性能Web建设指南摘要","slug":"高性能Web建设指南摘要","date":"2017-09-06T13:09:11.000Z","updated":"2019-06-19T07:09:22.740Z","comments":true,"path":"2017/09/06/高性能Web建设指南摘要/","link":"","permalink":"https://chenhx9211.github.io/2017/09/06/高性能Web建设指南摘要/","excerpt":"性能黄金法则：10 ～ 20%的总响应时间在下载 html 文档，80 ～ 90%的时间在下载页面中的组件(图片，外部样式表、脚本等)。优化的要点是减少占比达 80 ～ 90%页面组件响应时间。","text":"性能黄金法则：10 ～ 20%的总响应时间在下载 html 文档，80 ～ 90%的时间在下载页面中的组件(图片，外部样式表、脚本等)。优化的要点是减少占比达 80 ～ 90%页面组件响应时间。 规则 1–减少 HTTP 请求运用以下技术减少 http 请求 图片地图 CSS Sprites 内联图片 合并样式表 合并脚本 规则 2–使用内容分发网络&emsp;&emsp;内容分布网络(CDN)是一组分布在多个不同地理位置的 Web 服务器。静态内容组件发布到 CDN 后，会在多个 Web 服务器都有拷贝，当用户请求内容组件时，CDN 可选择响应时间最短的 Web 服务器(比如离用户最近的服务器)来完成请求。 &emsp;&emsp;CDN 不但带来更短的响应时间，而且可以缓解自身服务器的压力。 规则 3–添加 EXpires 头&emsp;&emsp;http 数据包分为头(head)和身体(body)两部分，头部可添加 Expires 和 Cache-Control 来影响浏览器的缓存时间。有两种方法可以设置 http 头 服务器端在响应请求时设置请求的 http 头。 html 页面通过 meta 标签的 http-equiv 来设定。 12＜meta http-equiv=&quot;expires&quot; content=&quot;Wed, 20 Jun 2007 22:33:00 GMT&quot;＞＜meta http-equiv=&quot;Cache-Control&quot; content=&quot;max-age=7200&quot;＞ &emsp;&emsp;http-equiv 相当于 http 的文件头作用，它可以向浏览器传回一些有用的信息，以帮助正确和精确地显示网页内容。http-equiv 对应的属性值为 content，可设置各个参数的变量值。&emsp;&emsp;客户端(比如 JavaScript 脚本)可以在 HTTP 请求中使用的标准 Cache-Control 指令 Cache-Control: max-age=&lt;seconds&gt; Cache-Control: max-stale[=&lt;seconds&gt; Cache-Control: min-fresh=&lt;seconds&gt; Cache-control: no-cache Cache-control: no-store Cache-control: no-transform Cache-control: only-if-cached &emsp;&emsp;服务器可以在响应中使用的标准 Cache-Control 指令 Cache-control: must-revalidate Cache-control: no-cache Cache-control: no-store Cache-control: no-transform Cache-control: public Cache-control: private Cache-control: proxy-revalidate Cache-Control: max-age=&lt;seconds&gt; Cache-control: s-maxage=&lt;seconds&gt; 规则 4–压缩组件Web 客户端可在 http 请求的头部中加入 Accept-Encoding 来标识客户端支持的压缩方法类型（浏览器一般会自动在每次的请求中加入这个头部指令），Web 服务器会用客户端列出来的方法之一来压缩响应结果，并在响应中加入 Content-Encoding:xxx. 最常用的压缩方法是 gzip。 存在代理和 CDN 的情况会变复杂，解决办法是在服务器的响应头部中加入 Vary: Accept-Encoding 规则 5–将样式表放在文档顶部&emsp;&emsp;浏览器一般会逐步呈现已下载的内容，样式表放在文档底部时，为避免当样式变化时重绘页面中的元素，浏览器会延迟显示任何可视化组件。样式表的放置在底部不会影响下载时间，但是会影响内容的逐步呈现，用户会有更慢的感觉，同时它还和白屏、无样式内容的闪烁相关。 规则 6–将脚本放在文档底部&emsp;&emsp;http 1.1 协议建议浏览器从每个主机名下并行的下载两个组件。 然而，下载脚本时实际上会禁用并行下载-即使使用了不同的主机名。其中的原因是： 脚本可能使用 document.write 来修改页面内容，因此浏览器会等待，以确保页面能够恰当的布局。 保证脚本能按正确的顺序执行，如果并行下载多个脚本，页面次序中在后的脚本有可能先下载完成并执行。 &emsp;&emsp;将脚本放在顶部，会阻塞对其后面内容的呈现，同时阻塞对后面组件的下载。 规则 7–避免 CSS 表达式&emsp;&emsp;CSS expression 方法可接受一个 JavaScript 表达式，很多情况下会导致对其频繁求值，影响浏览器性能。建议使用一次性表达式，或使用 JavaScript 在事件处理中提供动态行为。 规则 8–使用外部 JavaScript 和 CSS&emsp;&emsp;浏览器可以缓存外部 JavaScript 和 CSS，外部的 JavaScript 和 CSS 还可给网站中其他页面共享。 加载后下载同样的样式表或脚本同时写入到外部文件和内联到页面中，在页面的 onload 事件再次下载含有同样内容的外部文件。内联的样式和脚本让页面呈现更快，同时网站的其他页面可使用已下载的外部样式和脚本文件。需要注意脚本和 CSS 加载两次可能带来的问题。 规则 9–减少 DNS 查找&emsp;&emsp;浏览器会解析 html 页面外部组件所使用主机名称，http 1.1 协议建议每个主机名称两个并行下载；因而在 html 页面中对页面中的组件使用多个主机名称，可提高并行下载数量。然而过多的主机名称，可能不能更好的利用 http 1.1 协议的 keep-alive 特性，同时导致浏览器进行多次 DNS 查找。综合两个考虑，建议在页面中使用至少两个，但不要超过 4 个主机名。 规则 10–精简（minify） JavaScript 、 CSS压缩混淆 JavaScript 代码，以减小代码尺寸。同样对 CSS，html 都可使用工具进行 minify。 规则 11–避免重定向一些容易忽视的场景： url 指向目录时，结尾不要省略斜线/，不要让 Web 服务器为你发出重定向 内部流量跟踪，使用 referer 日志跟踪流量取向，而不是使用重定向。 出战流量跟踪，不实用重定向，而使用信标 beancon–一个在 url 中包含有跟踪信息的 http 请求（信标响应通常是一个 1px X 1px 的透明图片；或者使用 204 响应，因为它更小，从来不会被缓存，而且绝对不会改变浏览器状态。），跟踪信息可以从信标的 web 服务器请求日志中提取出来。 &emsp;&emsp;使用图片的信标例子 1234567891011121314151617&lt;a href=&quot;http://en.wikipedia.org/wiki/Performance&quot; onclick=&quot;resultBeacon(this); return false;&quot;&gt;Performance - Wikipedia&lt;/a&gt;&lt;script&gt;var beacon;function resultBeacon(anchor) &#123; beacon = new Image(); beacon.onload = gotoUrl; beacon.onerror = gotoUrl; // in case the image fails, we still want to redirect the user beacon.anchor = anchor; beacon.src = &quot;/bin/beacon204.gif?url=&quot; + escape(anchor.href);&#125;function gotoUrl() &#123; document.location = beacon.anchor.href;&#125;&lt;/script&gt; &emsp;&emsp;使用 XHttpRequest 的信标例子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;a href=&quot;http://en.wikipedia.org/wiki/Performance&quot; onclick=&quot;resultBeacon(this); return false;&quot;&gt;Performance - Wikipedia&lt;/a&gt;&lt;script&gt;var gAnchor, gXhrObj;function resultBeacon(anchor) &#123; gAnchor = anchor; beacon_src = &quot;http://stevesouders.com/images/beacon.gif?url=&quot; + escape(anchor.href) + &quot;&amp;t=&quot; + Number(new Date()); gXhrObj = getXHRObject(); gXhrObj.onreadystatechange = xhrCallback; try &#123; gXhrObj.open(&quot;GET&quot;, beacon_src, true); // true == async gXhrObj.send(&quot;&quot;); &#125;catch(err) &#123; gotoUrl(); // on failure, just go to the target url &#125;&#125;function xhrCallback(respAr) &#123; var readyState = ( respAr &amp;&amp; &quot;undefined&quot; != typeof(respAr.readyState) ? respAr.readyState : gXhrObj.readyState ); if ( 2 == readyState ) &#123; // the request is done enough to risk unloading the page gotoUrl(); &#125;&#125;function gotoUrl() &#123; document.location = gAnchor.href;&#125;// Find the right syntax for creating an XHR object.function getXHRObject() &#123; var xhrObj = false; try &#123; xhrObj = new XMLHttpRequest(); &#125;catch(e)&#123; var progid = [&apos;MSXML2.XMLHTTP.5.0&apos;, &apos;MSXML2.XMLHTTP.4.0&apos;, &apos;MSXML2.XMLHTTP.3.0&apos;, &apos;MSXML2.XMLHTTP&apos;, &apos;Microsoft.XMLHTTP&apos;]; for ( var i=0; i &lt; progid.length; ++i ) &#123; try &#123; xhrObj = new ActiveXObject(progid[i]); &#125;catch(e) &#123; &#125; &#125; &#125; finally &#123; return xhrObj; &#125;&#125;&lt;/script&gt; 规则 12–移除重复脚本&emsp;&emsp;团队规模和脚本数量变大，往往会有相同的脚本代码。需要实现一个脚本管理模块，避免重复的脚本。 规则 13–配置或移除 ETag&emsp;&emsp;ETag，Entity Tag-实体标签是 Web 服务器和浏览器用于确认缓存组件有效性的一种机制。条件 Get 请求会比较文件修改日期和 ETag 标签，ETag 标签对于静态文件而言不利。因此建议是在服务器端配置 ETag 或者干脆移除它。 规则 14–使 AJAX 可缓存&emsp;&emsp;某些 AJAX Get 请求可以被缓存，而不影响用户体验。要使这些 AJAX 请求被缓存，需要 给响应设置 HTTP Cache-Control 或 Expires 头 请求的 URL 中应包括响应的个性化和动态化数据，这样缓存结果才正确的反映出个性化和动态化。","categories":[],"tags":[{"name":"performance","slug":"performance","permalink":"https://chenhx9211.github.io/tags/performance/"}]},{"title":"高性能Web进阶指南摘要","slug":"高性能Web进阶指南摘要","date":"2017-09-06T13:09:11.000Z","updated":"2019-06-19T04:24:21.529Z","comments":true,"path":"2017/09/06/高性能Web进阶指南摘要/","link":"","permalink":"https://chenhx9211.github.io/2017/09/06/高性能Web进阶指南摘要/","excerpt":"","text":"","categories":[{"name":"javascript","slug":"javascript","permalink":"https://chenhx9211.github.io/categories/javascript/"}],"tags":[{"name":"performance","slug":"performance","permalink":"https://chenhx9211.github.io/tags/performance/"}]},{"title":"js高级之函数柯里化","slug":"js高级之函数柯里化","date":"2017-09-06T13:09:11.000Z","updated":"2019-06-18T15:00:35.121Z","comments":true,"path":"2017/09/06/js高级之函数柯里化/","link":"","permalink":"https://chenhx9211.github.io/2017/09/06/js高级之函数柯里化/","excerpt":"基本概念 在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。–翻译自维基百科 简单的说：柯里函数就是只接受一个参数的函数 例子如下： 12345678910function add(a, b) &#123; return a + b;&#125;// 执行 add 函数，一次传入两个参数即可add(1, 2); // 3// 假设有一个 curry 函数可以做到柯里化var addCurry = curry(add);addCurry(1)(2); // 3","text":"基本概念 在数学和计算机科学中，柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术。–翻译自维基百科 简单的说：柯里函数就是只接受一个参数的函数 例子如下： 12345678910function add(a, b) &#123; return a + b;&#125;// 执行 add 函数，一次传入两个参数即可add(1, 2); // 3// 假设有一个 curry 函数可以做到柯里化var addCurry = curry(add);addCurry(1)(2); // 3 用途和特点 参数复用 - 复用最初函数的第一个参数 提前返回 – 返回接受余下的参数且返回结果的新函数 延迟执行 – 返回新函数，等待执行 函数柯里化的简单实现step1: Generally speaking ，如果三个数求和的函数我们会这样写： 123function _sum3(x, y, z) &#123; return x + y + z;&#125; step2: 如果只考虑实现这个函数的柯里化，我们可以这样做： 12345678function sum3(x) &#123; return function(y) &#123; return function(z) &#123; return x + y + z; &#125;; &#125;;&#125;console.log(sum3(1)(2)(3)); // 6 step4: 观察上面两种不同的写法可以发现，第二种写法其实就是首先把三个参数收集起来，然后到最后再调用第一种写法的函数： 12345678function sum3(x) &#123; return function(y) &#123; return function(z) &#123; return _sum3(x, y, z); &#125;; &#125;;&#125;console.log(sum3(1)(2)(3)); // 6 step5: 所以柯里化的写法只是把常用写法包装了一下，可以使用一个专用的柯里化函数实现这种包装。柯里化函数是一种高阶函数，我们把它命名为 curry 1234567891011function curry(fn) &#123; return function(y) &#123; return function(z) &#123; return fn(x, y, z); &#125;; &#125;;&#125;var sum3 = curry((x, y, z) =&gt; &#123; return x + y + z;&#125;);console.log(sum3(1)(2)(3)); // 6 step6: 如果有要写一种更加通用的，可以柯里化拥有任意多个参数的函数呢，比如 sumN(1)(2)(3)…(N)，按照之前的写法，大概是这个样子的： 123456789101112function curryN(fn) &#123; return function(a1) &#123; return function(a2) &#123; return function(a3) &#123; //...... return function(aN) &#123; return fn(a1, a2, a3, ...aN); &#125;; &#125;; &#125;; &#125;;&#125; step7: 很容易想到可以用一个递归函数来简化这种写法，将上面那些看起来相似的函数结构命名为 nest，就可以写为： 12345678function nest(fn) &#123; return function(x) &#123; return nest(fn); &#125;;&#125;function curry(fn) &#123; nest(fn);&#125; step8: 这里缺少一个循环终止的判断，所以 nest 函数先引入一个新参数 i，当 i === N 时递归终止 1234567891011function nest(fn, i) &#123; return function(x) &#123; if (i === N) &#123; return fn(...) &#125; return nest(fn, i + 1) &#125;&#125;function curry(fn) &#123; return nest(fn, 1)&#125; step9: 接着，需要一个存放任意多个参数的数组，将这个数组命名为 args，然后传入 nest 函数 12345678910111213function nest(fn, i, args) &#123; return function(x) &#123; args.push(x); if (i === fn.length) &#123; return fn(...args); &#125; return nest(fn, i + 1, args); &#125;;&#125;function curry(fn) &#123; const args = []; return nest(fn, 1, args);&#125; step10: 最后在添加一个处理 0 个参数的情况，我们就完成了最终版的柯里化函数 1234567function curry(fn) &#123; if (fn.length === 0) &#123; return fn; &#125; const args = []; return nest(fn, 1, args);&#125; 小试牛刀一下！ 1234const log1 = curry(x =&gt; console.log(x));log1(10); // 10const mul3 = curry((x, y, z) =&gt; console.log(x * y * z));mul3(2)(3)(4); // 24","categories":[{"name":"javascript","slug":"javascript","permalink":"https://chenhx9211.github.io/categories/javascript/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://chenhx9211.github.io/tags/es6/"}]},{"title":"redux","slug":"redux","date":"2017-04-13T02:13:26.000Z","updated":"2019-06-18T13:44:56.601Z","comments":true,"path":"2017/04/13/redux/","link":"","permalink":"https://chenhx9211.github.io/2017/04/13/redux/","excerpt":"我学习 redux 的心得： 1.单一的状态树，单向数据流 2.整个项目只有一个 store","text":"我学习 redux 的心得： 1.单一的状态树，单向数据流 2.整个项目只有一个 store 3.由用户发出一个 action，reducer 方法接收这个方法和一个老的 state，再重新返回一个新 state,视图再更新 4.在开发的时候一般会把很多个 reducer 用 redux 里面的 combineReducers 方法合并在一个，便于管理","categories":[{"name":"redux","slug":"redux","permalink":"https://chenhx9211.github.io/categories/redux/"}],"tags":[{"name":"redux","slug":"redux","permalink":"https://chenhx9211.github.io/tags/redux/"}]},{"title":"es6","slug":"es6","date":"2017-04-12T10:54:22.000Z","updated":"2019-06-18T10:39:43.596Z","comments":true,"path":"2017/04/12/es6/","link":"","permalink":"https://chenhx9211.github.io/2017/04/12/es6/","excerpt":"先说一下 let 吧！ let 和 var 一样用来声明变量，但是不同的是：let 命令只在所在的代码块内有效(es5 没有块级作用域) for 循环里面不要再用 var 了，要不然每次输出来的都是最后一个遍历出来的值 let 不存在变量提升，一定要先声明后使用，要不然报错；而 var 可以先使用再声明，输出来 undefined 暂时性死区，只要进去作用域，所要使用的变量就已经存在了，但是不可以获取，只有等到变量声明了才可以获取和使用它 let 不允许在同一作用域内重复声明","text":"先说一下 let 吧！ let 和 var 一样用来声明变量，但是不同的是：let 命令只在所在的代码块内有效(es5 没有块级作用域) for 循环里面不要再用 var 了，要不然每次输出来的都是最后一个遍历出来的值 let 不存在变量提升，一定要先声明后使用，要不然报错；而 var 可以先使用再声明，输出来 undefined 暂时性死区，只要进去作用域，所要使用的变量就已经存在了，但是不可以获取，只有等到变量声明了才可以获取和使用它 let 不允许在同一作用域内重复声明 为什么需要块级作用域呢？@内层变量可能会覆盖外层变量@用来计数的循环变量泄露为全局变量，很容易造成内存泄漏 下面再说说 const! 用来声明常量，所以一旦声明变量，就必须立即初始化，不能留到以后赋值，只声明不赋值，就会报错 const 的作用域与 let 命令相同：只在声明所在的块级作用域内有效 const 命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用 const 声明的常量，也与 let 一样不可重复声明 结构先不说，比较简单，主要分为数组，对象，字符串，数值，布尔值，函数参数解构看了一圈下来，关键是用途，总结一下： 交换变量的值 从函数返回多个值 函数参数的定义 提取 json 数据(我认为这个比较实用，拿出来可以直接放到视图) 遍历 Map 结构 字符串的扩展(下面几个是我认为能用到项目里面频率相对高的) Unicode 表示法：eg:\\u{1F680} 遍历接口器，可以把字符串的每一个字符都遍历出来 123456for (let codePoint of 'foo') &#123; console.log(codePoint)&#125;// \"f\"// \"o\"// \"o\" at(),这个和 es5 的 charAt()差不多，并且能识别出来码点大于 0xFFFF 的字符 includes(),startsWith(),endsWith(),he es5 的 indexOf 方法差不多，它返回的是布尔值 12345var s = 'Hello world!';s.startsWith('Hello') // trues.endsWith('!') // trues.includes('o') // true repeat()直接看下面的代码吧 123'x'.repeat(3) // \"xxx\"'hello'.repeat(2) // \"hellohello\"'na'.repeat(0) // \"\" 注意：如果是小数，则取整；负数或者 Infinity，报错；0 到-1 的都视为 0；NaN 视为 0","categories":[{"name":"es6","slug":"es6","permalink":"https://chenhx9211.github.io/categories/es6/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://chenhx9211.github.io/tags/es6/"}]},{"title":"基于vue vuex es6 webpack的项目","slug":"基于vue vuex es6 webpack的项目","date":"2017-04-11T13:46:37.000Z","updated":"2019-06-18T10:40:23.215Z","comments":true,"path":"2017/04/11/基于vue vuex es6 webpack的项目/","link":"","permalink":"https://chenhx9211.github.io/2017/04/11/基于vue vuex es6 webpack的项目/","excerpt":"一个基于 vue+vuex+es6+webpack 技术栈的 spa 开店项目","text":"一个基于 vue+vuex+es6+webpack 技术栈的 spa 开店项目 使用了 vue-router 来做页面的路由跳转，主页跳转至详情页面使用具体路由的配置。 整个项目使用的是 es6 的语法我比较喜欢 es6 的语法，arrow function，let,const,template string，解构,尤其是在 react 里面比较喜欢用的 class,extends,super。 状态管理用 vuex 使用 axios 从后端获取数据 对啦，项目使用的脚手架 vue-cli,快速上手 github 地址：https://github.com/chenhx9211/vue-onlineStore","categories":[{"name":"vue","slug":"vue","permalink":"https://chenhx9211.github.io/categories/vue/"}],"tags":[{"name":"vue vuex","slug":"vue-vuex","permalink":"https://chenhx9211.github.io/tags/vue-vuex/"}]},{"title":"react-native 常用的布局：flexbox","slug":"layout","date":"2017-04-10T06:09:14.000Z","updated":"2019-06-18T13:01:19.148Z","comments":true,"path":"2017/04/10/layout/","link":"","permalink":"https://chenhx9211.github.io/2017/04/10/layout/","excerpt":"基本概念 采用 flex 布局的元素就是 flex 容器：flex container.它里面所有的元素都叫子元素：flex item. container 容器存在两根轴：水平的主轴(main axis)和垂直的交叉轴(cross axis).主轴起始位置 main start,结束位置 main end,交叉轴起始位置 cross start,结束位置 cross end. 3.项目默认沿着主轴排列.","text":"基本概念 采用 flex 布局的元素就是 flex 容器：flex container.它里面所有的元素都叫子元素：flex item. container 容器存在两根轴：水平的主轴(main axis)和垂直的交叉轴(cross axis).主轴起始位置 main start,结束位置 main end,交叉轴起始位置 cross start,结束位置 cross end. 3.项目默认沿着主轴排列. container 上设置的属性有 6 个 flex-direction flex-wrap flex-flow justify-content align-items align-content flex-direction:主轴的方向123.box&#123; flex-direction:row | row-reverse | column | column-reverse;&#125; flex-wrap:如果一条轴线排不下，如何换行123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 1.nowrap:不换行2.wrap：换行，第一行在上方3.wrap-reverse：换行，第一行在下方 flex-flow：是 flex-direction 和 flex-wrap 的简写justify-content：项目在主轴上的对齐方式123.box &#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; flex-start：左对齐 flex-end：右对齐 center：居中 space-between：两端对齐，项目之间的间隔都相等 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍 align-items：项目在交叉轴上如何对齐123.box &#123; align-items: flex-start | flex-end | center | baseline | stretch;&#125; flex-start：交叉轴的起点对齐 flex-end：交叉轴的终点对齐 center：交叉轴的中点对齐 baseline：项目的第一行文字的基线对齐 stretch：如果项目未设置高度或设为 auto，将占满整个容器的高度(默认值) align-content:定义了多根轴线的对齐方式.如果项目只有一根轴线，该属性不起作用123.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125; item 上设置的属性有 6 个 order flex-grow flex-shrink flex-basis flex align-self order:定义项目的排列顺序.数值越小，排列越靠前，默认为 0.123.item &#123; order: &lt;integer&gt;;&#125; flex-grow:定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大.注意：如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍 123.item &#123; flex-grow: &lt;number&gt;; /* default 0 */&#125; flex-shrink：定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小.注意：如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小 123.item &#123; flex-shrink: &lt;number&gt;; /* default 1 */&#125; flex-basis：定义了在分配多余空间之前，项目占据的主轴空间（main size）.注意：它可以设为跟 width 或 height 属性一样的值（比如 350px），则项目将占据固定空间 123.item &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; flex：是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。后两个属性可选.align-self:允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性.默认值为 auto.123.item &#123; align-self: auto | flex-start | flex-end | center | baseline | stretch;&#125; 好啦,到此结束！ 注意事项 任何一个元素都可以使用 flex 布局，行内元素使用 display:inline-flex; webkit 内核的浏览器必须加上-webkit 前缀：display：-webkit-flex; 设置 flex 布局以后，子元素的这三个属性将会失效:float,clear,vertical-align.","categories":[{"name":"css","slug":"css","permalink":"https://chenhx9211.github.io/categories/css/"}],"tags":[{"name":"flex","slug":"flex","permalink":"https://chenhx9211.github.io/tags/flex/"}]},{"title":"js设计模式之观察者模式","slug":"js设计模式之观察者模式","date":"2016-02-17T03:29:07.000Z","updated":"2019-06-18T15:36:41.545Z","comments":true,"path":"2016/02/17/js设计模式之观察者模式/","link":"","permalink":"https://chenhx9211.github.io/2016/02/17/js设计模式之观察者模式/","excerpt":"","text":"","categories":[{"name":"javascript","slug":"javascript","permalink":"https://chenhx9211.github.io/categories/javascript/"}],"tags":[{"name":"es6","slug":"es6","permalink":"https://chenhx9211.github.io/tags/es6/"}]}]}